#include "w3macros.h"
!---------------------------------------------------------------------/
      MODULE W3WDASMD
!---------------------------------------------------------------------/
!
      CONTAINS
!---------------------------------------------------------------------/
SUBROUTINE ASS_CAL ( DASFLAG, RECL, NDAT, DATA0, DATA1, DATA2, &
                     ASSI_LON, ASSI_LAT, ASSI_NAMES, ASSI_CYCLE, &
                     ASSI_NUMBER, ASSI_RADIUS, ASSI_LENGTH, ASSI_GRID )
!---------------------------------------------------------------------/
      USE W3ODATMD,  ONLY : IAPROC, NAPROC, NAPOUT
      USE W3GDATMD
      USE W3WINDMD      
      USE W3DAINMD,  ONLY : SWITCH_SPEC, SWITCH_WIND
!
      IMPLICIT NONE
!
!/MPI INCLUDE "mpif.h"
!----------------------------------------------------------------------/
!
!PARAMETER LIST
      INTEGER,INTENT(IN)    :: RECL(3),NDAT(3)
      REAL,INTENT(IN)       :: DATA0(RECL(1),NDAT(1))
      REAL,INTENT(IN)       :: DATA1(RECL(2),NDAT(2)) 
      REAL,INTENT(IN)       :: DATA2(RECL(3),NDAT(3))
      LOGICAL,INTENT(IN)    :: DASFLAG(3)
      REAL,INTENT(IN)       :: ASSI_LON(:,:), ASSI_LAT(:,:)
      CHARACTER(LEN=15),INTENT(IN)  :: ASSI_NAMES(:,:)
      INTEGER,INTENT(IN)    :: ASSI_GRID,ASSI_CYCLE, ASSI_NUMBER
      REAL,INTENT(IN)       :: ASSI_RADIUS, ASSI_LENGTH
!LOCAL PARAMETER
      INTEGER               :: J
      REAL, ALLOCATABLE     :: TDATA(:,:)
!
!--------------------------------------------------------------------/
      DO J=1,1
         IF( DASFLAG(J) ) THEN
            IF(ALLOCATED(TDATA)) DEALLOCATE(TDATA)
            ALLOCATE ( TDATA(RECL(J),NDAT(J) ) )
            IF ( J .EQ. 1 ) THEN
               TDATA = DATA0(:,:)
               IF (IAPROC .EQ. NAPOUT) WRITE (*,1001)  RECL(J), NDAT(J)
            END IF
         END IF      
      END DO
!
      IF ( (.NOT. DASFLAG(1)) ) THEN
          IF (IAPROC .EQ. NAPOUT) WRITE (*,1004)
          RETURN
      END IF
!
      CALL AL_SPACE
!
      CALL GET_HS(TDATA, ASSI_LON, ASSI_LAT, ASSI_NAMES,ASSI_CYCLE, &
                  ASSI_NUMBER, ASSI_RADIUS, ASSI_LENGTH, ASSI_GRID)      
!
      IF( SWITCH_SPEC ) THEN
          CALL CHANGE_SPECTRUM
      ENDIF
!
      IF(ALLOCATED(TDATA)) DEALLOCATE(TDATA)
      CALL DE_SPACE
!
      RETURN
!
!FORMAT
 1001 FORMAT(/ 'DATA ASSIMILATION INFORMATION : '/                &
               '        DATA ASSIMILATION TYPE: MEAN PARS.' /     &
               '                DATA STRUCTION:',2I8     /        )
 1004 FORMAT (/ 'All DATA ASSIMILATION FLAG ARE F'/               &
                'PLEASE CHACK AGAIN ' /                           )
!--------------------------------------------------------------------/
END SUBROUTINE ASS_CAL
!--------------------------------------------------------------------/
SUBROUTINE GET_HS(TDATA, ASSI_LON, ASSI_LAT, ASSI_NAMES, ASSI_CYCLE, &
                  ASSI_NUMBER, ASSI_RADIUS, ASSI_LENGTH, ASSI_GRID)
!--------------------------------------------------------------------/
!
    USE W3GDATMD
    USE W3ADATMD, ONLY : HS, W3XETA, W3SETA
    USE W3ODATMD, ONLY : IAPROC, NAPROC, NAPOUT
!
    IMPLICIT NONE
!/MPI INCLUDE "mpif.h"
!
    REAL,INTENT(IN)       :: TDATA(:,:)
    REAL,INTENT(IN)       :: ASSI_LON(:,:), ASSI_LAT(:,:)
    CHARACTER(LEN=15),INTENT(IN)  :: ASSI_NAMES(:,:)
    INTEGER,INTENT(IN)    :: ASSI_GRID,ASSI_CYCLE, ASSI_NUMBER
    REAL,INTENT(IN)       :: ASSI_RADIUS, ASSI_LENGTH
!
    INTEGER               :: Q, I, M
    REAL                  :: HS_INCR, DISTANCE
    INTEGER               :: IX_1, IY_1, MASK
    REAL                  :: SATE_INDEX, SATE_STD_INDEX, COEF
!/MPI INTEGER               :: IERR_MPI    

    IF(ALLOCATED(HS_BK))  DEALLOCATE(HS_BK)
    IF(ALLOCATED(HS_AN))  DEALLOCATE(HS_AN)
    ALLOCATE(HS_BK(NX*NY)) 
    ALLOCATE(HS_AN(NX*NY)) 
    HS_BK(:) = 0.0
    HS_AN(:) = 0.0
    CALL W3XETA(1,6,6) 
    HS_BK(1:size(HS)) = HS(:)
    CALL W3SETA(1,6,6) 
!/MPI    CALL MPI_BCAST(HS_BK,NX*NY,MPI_REAL,NAPROC,MPI_COMM_WORLD,IERR_MPI)
    HS_AN(:) = HS_BK(:)
!
    DO Q=1,ASSI_NUMBER
      DO I=1,ASSI_CYCLE
         CALL GET_4GRID( ASSI_LON(I,Q), ASSI_LAT(I,Q), ASSI_NAMES(I,Q) )
         IF( ABS(ASSI_LON_NEW-(-999.0)) .gt. 1.0 .AND. ABS(ASSI_LAT_NEW-(-999.0)) .gt. 1.0 &
              .AND. ABS(TDATA(I,Q)-(-999.0)) .gt. 1.0 .AND. (TDATA(I,Q) .lt. 15.0) )THEN
               CALL GET_CLOSE_POINT( IX_1, IY_1, MASK ) 
               CALL GET_OBSINCR( TDATA(I,Q) ) 
               IF( ABS(HS_OBS_INCR) .GT. 0.01 .AND. ABS(HS_OBS_INCR) .LE. 3 ) THEN
                   CALL GET_LINE( IX_1, IY_1, ASSI_GRID, MASK ) 
                   DO M=1,(ASSI_GRID*2)**2
                      IF( ABS(LON_SUR(M)-(-999.0)) .GT. 1.0      .AND. & 
                          ABS(LAT_SUR(M)-(-999.0)) .GT. 1.0      .AND. &
                          ABS(IS_SUR_GLOBAL(M)-(-999)) .GT. 1.0  .AND. &
                          IS_4_LOCAL(MASK) .NE. 0                .AND. & 
                          IS_SUR_LOCAL(M) .NE. 0                 .AND. &
                          (SATE_STD(IS_4_GLOBAL(MASK)) .GT. 0)   .AND. & 
                          (SATE_STD(IS_SUR_GLOBAL(M))  .GT. 0)    ) THEN 
                          CALL GET_DISTANCE(ASSI_LON_NEW, ASSI_LAT_NEW, LON_SUR(M),LAT_SUR(M), DISTANCE)
                          HS_INCR=0.0
                          SATE_STD_INDEX = 0.0
                          COEF = 0 
                          IF( DISTANCE .LE. ASSI_RADIUS ) THEN
                              SATE_STD_INDEX = SATE_STD(IS_SUR_GLOBAL(M)) / SATE_STD(IS_4_GLOBAL(MASK))
                              IF(MASK .EQ. 1) COEF = COEF1(IS_4_GLOBAL(MASK),M)
                              IF(MASK .EQ. 2) COEF = COEF2(IS_4_GLOBAL(MASK),M)
                              IF(MASK .EQ. 3) COEF = COEF3(IS_4_GLOBAL(MASK),M)
                              IF(MASK .EQ. 4) COEF = COEF4(IS_4_GLOBAL(MASK),M)
                              HS_INCR = SATE_STD_INDEX *                 &
                                        COEF *                           & 
                                        EXP(-(DISTANCE/ASSI_LENGTH) ) *  & 
                                        HS_OBS_INCR
                              HS_AN(IS_SUR_LOCAL(M)) = HS_AN(IS_SUR_LOCAL(M)) + HS_INCR 
                          ENDIF 
                      ENDIF  
                   ENDDO 
               ENDIF 
         ELSE
               IF(IAPROC .EQ. NAPOUT) WRITE(*,"(10X)")
               IF(IAPROC .EQ. NAPOUT) WRITE(*,*) 'WARNING! this point is invalid',ASSI_LON(I,Q),ASSI_LAT(I,Q), ASSI_NAMES(I,Q)
               IF(IAPROC .EQ. NAPOUT) WRITE(*,"(10X)")
!
         ENDIF
      ENDDO 
    ENDDO 
!
    RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_HS
!--------------------------------------------------------------------/
SUBROUTINE GET_4GRID( ASSI_LON, ASSI_LAT, ASSI_NAMES )
!--------------------------------------------------------------------/
       USE W3GDATMD, ONLY: X0, Y0, SX, SY, NX, NY, MAPFS, MAPSTA, IX_4, IY_4, &
                           ASSI_LON_NEW, ASSI_LAT_NEW, ASSI_NAMES_NEW, MAPSF,&
                           IS_4_LOCAL, IS_4_GLOBAL
       USE W3ODATMD, ONLY: IAPROC, NAPERR, NAPOUT
!     
       IMPLICIT NONE
!PARAMETER LIST
       REAL,INTENT(IN)                     :: ASSI_LON, ASSI_LAT
       CHARACTER(LEN=15),INTENT(IN)        :: ASSI_NAMES 
!LOCAL PARAMETER
       INTEGER :: IX(4),IY(4) 
       INTEGER :: K
       REAL    :: LON_MAX, LAT_MAX
!---------------------------------------------------------
       IF( ABS(ASSI_LON) .LT. 0.01 .AND. ABS(ASSI_LAT) .LT. 0.01 ) THEN
          ASSI_LON_NEW = -999.0
          ASSI_LAT_NEW = -999.0
          RETURN
       ENDIF
       LON_MAX = X0 + REAL(NX-1) * SX 
       LAT_MAX = Y0 + REAL(NY-1) * SY
       IF( ASSI_LON .LT. X0 .OR. ASSI_LON .GT. LON_MAX .OR. &
           ASSI_LAT .LT. Y0 .OR. ASSI_LAT .GT. LAT_MAX ) THEN
          ASSI_LON_NEW = -999.0  
          ASSI_LAT_NEW = -999.0  
          RETURN
       ENDIF
!
       IX(1)=FLOOR( (ASSI_LON - X0)/SX ) + 1
       IY(1)=FLOOR( (ASSI_LAT - Y0)/SY ) + 1
       IF( IX(1) .LE. 0 .OR. (IX(1)+1) .GT. NX  .OR. &
           IY(1) .LE. 0 .OR. (IY(1)+1) .GT. NY ) THEN
          ASSI_LON_NEW = -999.0  
          ASSI_LAT_NEW = -999.0  
          RETURN
       ENDIF 
!
       IX(2)=IX(1)+1
       IX(3)=IX(1)+1
       IX(4)=IX(1)
       IY(2)=IY(1)
       IY(3)=IY(1)+1
       IY(4)=IY(1)+1
!
       IF ( MAPSTA(IY(1),IX(1)) .EQ. 0 .AND. &
            MAPSTA(IY(2),IX(2)) .EQ. 0 .AND. &
            MAPSTA(IY(3),IX(3)) .EQ. 0 .AND. &
            MAPSTA(IY(4),IX(4)) .EQ. 0    ) THEN
          ASSI_LON_NEW = -999.0  
          ASSI_LAT_NEW = -999.0  
          RETURN
       ENDIF
!
       DO K=1,4
          IX_4(K) = IX(K)
          IY_4(K) = IY(K)
          IS_4_LOCAL(K)  = MAPFS( IY(K), IX(K) ) 
          IS_4_GLOBAL(K) = MAPSF( MAPFS( IY(K), IX(K) ),3 )
       ENDDO
       ASSI_LON_NEW    = ASSI_LON
       ASSI_LAT_NEW    = ASSI_LAT
       ASSI_NAMES_NEW  = ASSI_NAMES
!
       RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_4GRID
!--------------------------------------------------------------------/
SUBROUTINE GET_CLOSE_POINT( IX1, IY1, MASK )
!--------------------------------------------------------------------/
!
      USE W3GDATMD, ONLY : IX_4, IY_4, LON_4, LAT_4, MAPFS, &
                           ASSI_LON_NEW, ASSI_LAT_NEW, X0, Y0, SX, SY
      USE W3ODATMD, ONLY: IAPROC, NAPERR, NAPOUT
!
      IMPLICIT NONE
!
      INTEGER         :: IX1, IY1, MASK
!
      REAL            :: DIS(4), RES
      INTEGER         :: J
!      
      DO J=1,4
         LON_4(J)        = X0+REAL(IX_4(J)-1) * SX
         LAT_4(J)        = Y0+REAL(IY_4(J)-1) * SY
         CALL GET_DISTANCE( ASSI_LON_NEW,ASSI_LAT_NEW, LON_4(J),LAT_4(J),DIS(J) )
      ENDDO
!
      RES  = DIS(1)
      MASK = 1
      DO J=2,4
         IF( DIS(J) .LT. RES ) THEN
             RES  = DIS(J)
             MASK = J
         ENDIF
      ENDDO
!
      IX1=IX_4(MASK)
      IY1=IY_4(MASK)
!
      RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_CLOSE_POINT
!--------------------------------------------------------------------/
SUBROUTINE GET_LINE( IX, IY, INF_GRID, MASK )
!--------------------------------------------------------------------/
!
       USE W3GDATMD, ONLY: X0, Y0, SX, SY, NX, NY, MAPSTA, MAPFS, MAPSF,   &
                           IX_LINE, IY_LINE, X_LINE_SUR, Y_LINE_SUR, &
                           LON_SUR, LAT_SUR, IS_SUR_LOCAL, IS_SUR_GLOBAL
       USE W3ODATMD, ONLY: IAPROC, NAPOUT
!     
       IMPLICIT NONE
!/MPI INCLUDE "mpif.h"
!PARAMETER LIST
       INTEGER,INTENT(IN)                     :: IX, IY, INF_GRID, MASK
!LOCAL PARAMETER
       INTEGER    :: J, I, NUM1
!
       IF( (INF_GRID *2 .GE. NY) .OR. (INF_GRID*2 .GE. NX) ) THEN
          IF( IAPROC .EQ. NAPOUT)  THEN    
             WRITE(*,*) 'SORRY,THE INFLUENCE GRID IS TOO BIG'
             WRITE(*,*) 'PLEASE GIVE A SMALLER INFLUENCE GRID'
          ENDIF
          RETURN
       ENDIF
!
       IF(ALLOCATED(IX_LINE))   DEALLOCATE(IX_LINE)
       IF(ALLOCATED(IY_LINE))   DEALLOCATE(IY_LINE)
       ALLOCATE(  IX_LINE( INF_GRID*2 )  )
       ALLOCATE(  IY_LINE( INF_GRID*2 )  )
       IX_LINE = 0
       IY_LINE = 0
!
       NUM1 = 0
       IF( MASK .EQ. 2 .OR. MASK .EQ. 3 ) THEN 
           DO I=-INF_GRID,(INF_GRID-1)  
              NUM1 = NUM1 + 1
              IF( IX+I .GT. 0 .AND. IX+I .LE. NX ) THEN
                  IX_LINE(NUM1) = IX+I
              ENDIF
           ENDDO
       ELSEIF ( MASK .EQ. 1 .OR. MASK .EQ. 4 ) THEN 
           DO I=-(INF_GRID-1),INF_GRID
              NUM1 = NUM1 + 1
              IF( IX+I .GT. 0 .AND. IX+I .LE. NX ) THEN
                  IX_LINE(NUM1) = IX+I
              ENDIF
           ENDDO
       ENDIF
!
       NUM1 = 0
       IF( MASK .EQ. 1 .OR. MASK .EQ. 2 ) THEN 
           DO I=-(INF_GRID-1),INF_GRID  
              NUM1 = NUM1 + 1
              IF( IY+I .GT. 0 .AND. IY+I .LE. NY ) THEN
                  IY_LINE(NUM1) = IY+I
              ENDIF
           ENDDO
       ELSEIF( MASK .EQ. 3 .OR. MASK .EQ. 4 ) THEN 
           DO I=-INF_GRID,(INF_GRID-1) 
              NUM1 = NUM1 + 1
              IF( IY+I .GT. 0 .AND. IY+I .LE. NY ) THEN
                  IY_LINE(NUM1) = IY+I
              ENDIF
           ENDDO
       ENDIF
!
       IF(ALLOCATED(X_LINE_SUR))         DEALLOCATE(X_LINE_SUR)
       IF(ALLOCATED(Y_LINE_SUR))         DEALLOCATE(Y_LINE_SUR)
       IF(ALLOCATED(LON_SUR))            DEALLOCATE(LON_SUR)
       IF(ALLOCATED(LAT_SUR))            DEALLOCATE(LAT_SUR)
       IF(ALLOCATED(IS_SUR_LOCAL))       DEALLOCATE(IS_SUR_LOCAL)
       IF(ALLOCATED(IS_SUR_GLOBAL))      DEALLOCATE(IS_SUR_GLOBAL)

       ALLOCATE( X_LINE_SUR( (INF_GRID*2)**2 )  )
       ALLOCATE( Y_LINE_SUR( (INF_GRID*2)**2 )  )
       ALLOCATE( LON_SUR( (INF_GRID*2)**2 )  )
       ALLOCATE( LAT_SUR( (INF_GRID*2)**2 )  )
       ALLOCATE( IS_SUR_LOCAL( (INF_GRID*2)**2 ) )
       ALLOCATE( IS_SUR_GLOBAL( (INF_GRID*2)**2 ) )
       X_LINE_SUR = 0
       Y_LINE_SUR = 0
       LON_SUR    = -999.0
       LAT_SUR    = -999.0
       IS_SUR_LOCAL   = -999
       IS_SUR_GLOBAL  = -999
!
       NUM1 = 0
       DO I=1,INF_GRID*2
          DO J=1,INF_GRID*2
             NUM1 = NUM1 + 1
             X_LINE_SUR(NUM1) = IX_LINE(J)
             Y_LINE_SUR(NUM1) = IY_LINE(I)
             IF( X_LINE_SUR(NUM1) .NE. 0 .AND. Y_LINE_SUR(NUM1) .NE. 0 ) THEN
                 LON_SUR(NUM1) = X0+REAL(X_LINE_SUR(NUM1)-1) * SX
                 LAT_SUR(NUM1) = Y0+REAL(Y_LINE_SUR(NUM1)-1) * SY
                 IS_SUR_LOCAL(NUM1)  = MAPFS( Y_LINE_SUR(NUM1), X_LINE_SUR(NUM1) ) 
                 IS_SUR_GLOBAL(NUM1) = MAPSF( MAPFS( Y_LINE_SUR(NUM1), X_LINE_SUR(NUM1) ),3 ) 
             ENDIF
          ENDDO
       ENDDO
!
      RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_LINE
!--------------------------------------------------------------------/
SUBROUTINE GET_OBSINCR( TDATA )
!--------------------------------------------------------------------/
          USE W3GDATMD, ONLY : X0, Y0, SX, SY, MAPFS, HS_OBS_INCR, &
                               ASSI_LON_NEW, ASSI_LAT_NEW, IX_4, IY_4, &
                               LON_4, LAT_4, IS_4_LOCAL
          USE W3ODATMD, ONLY : IAPROC, NAPOUT, NAPROC
          USE W3ADATMD, ONLY : HS, W3XETA, W3SETA 
          USE W3GDATMD, ONLY : HS_AN
!
          IMPLICIT NONE
!/MPI INCLUDE "mpif.h"
!PARAMETER LIST
          REAL,INTENT(IN)      :: TDATA 
!LOCAL PARAMETER
          INTEGER   :: J
          REAL      :: HS_GUESS(4)
          REAL      :: HS1, HS2, HS_OBS
!/MPI     INTEGER   :: IERR_MPI
!
          HS_OBS_INCR = 0.0
          HS_GUESS(:) = 0.0
!
          DO J=1,4
             HS_GUESS(J)   = HS_AN(IS_4_LOCAL(J))
          ENDDO
!/MPI       CALL MPI_BCAST(HS_GUESS,4,MPI_REAL,NAPROC,MPI_COMM_WORLD,IERR_MPI)
          IF( HS_GUESS(1) .LT. 0.0  .OR. HS_GUESS(2) .LT. 0.0  .OR. &  
              HS_GUESS(3) .LT. 0.0  .OR. HS_GUESS(4) .LT. 0.0  ) THEN   
              HS_OBS_INCR = 0.0
          ELSE
!
              HS1 = (ASSI_LON_NEW-LON_4(4)) / (LON_4(3)-LON_4(4)) * HS_GUESS(3) + &
                    (LON_4(3)-ASSI_LON_NEW) / (LON_4(3)-LON_4(4)) * HS_GUESS(4) 
              HS2 = (ASSI_LON_NEW-LON_4(1)) / (LON_4(2)-LON_4(1)) * HS_GUESS(2) + &
                    (LON_4(2)-ASSI_LON_NEW) / (LON_4(2)-LON_4(1)) * HS_GUESS(1) 
              HS_OBS= (ASSI_LAT_NEW-LAT_4(2)) / (LAT_4(3)-LAT_4(2)) * HS1 + &
                      (LAT_4(3)-ASSI_LAT_NEW) / (LAT_4(3)-LAT_4(2)) * HS2
!
             HS_OBS_INCR   = TDATA-HS_OBS
          ENDIF
!/MPI       CALL MPI_BCAST(HS_OBS_INCR,1,MPI_REAL,NAPROC,MPI_COMM_WORLD,IERR_MPI)
!
          RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_OBSINCR
!--------------------------------------------------------------------/
SUBROUTINE GET_DISTANCE(LON_SUR,LAT_SUR,S_LON,S_LAT,DISTANCE)
!--------------------------------------------------------------------/
!
          IMPLICIT NONE
!PARAMETER LIST
          REAL,INTENT(IN)                :: LON_SUR,LAT_SUR,S_LON,S_LAT
          REAL,INTENT(INOUT)             :: DISTANCE
!LOCAL PARAMETER
          INTEGER             :: J
          REAL                :: PI = 3.141592654
          REAL                :: X1, Y1, TMP
          REAL                :: X2, Y2
!
          X2 = S_LON * PI / 180.0
          Y2 = S_LAT * PI / 180.0
!
          X1 = LON_SUR * PI / 180.0
          Y1 = LAT_SUR * PI / 180.0
          TMP= SIN(Y1) * SIN(Y2) + COS(Y1) * COS(Y2) * COS(X1-X2)
          DISTANCE = 6371 * ACOS(TMP) 
!
          RETURN
!
!--------------------------------------------------------------------/
END SUBROUTINE GET_DISTANCE
!--------------------------------------------------------------------/
      END MODULE W3WDASMD
!--------------------------------------------------------------------/
